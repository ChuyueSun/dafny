(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 () T@U)
(declare-fun $generated@@45 () T@U)
(declare-fun $generated@@46 () T@U)
(declare-fun $generated@@47 () T@U)
(declare-fun $generated@@48 () T@U)
(declare-fun $generated@@49 () T@U)
(declare-fun $generated@@50 () T@U)
(declare-fun $generated@@51 () T@U)
(declare-fun $generated@@52 () T@U)
(declare-fun $generated@@53 () T@U)
(declare-fun $generated@@54 () T@U)
(declare-fun $generated@@55 () T@U)
(declare-fun $generated@@56 () T@U)
(declare-fun $generated@@57 () T@U)
(declare-fun $generated@@58 () T@U)
(declare-fun $generated@@59 () T@U)
(declare-fun $generated@@60 () T@U)
(declare-fun $generated@@61 () T@T)
(declare-fun $generated@@62 () T@T)
(declare-fun $generated@@63 (T@T) T@T)
(declare-fun $generated@@64 (T@T) T@T)
(declare-fun $generated@@67 (T@U) T@U)
(declare-fun $generated@@69 (T@U T@U T@U) Bool)
(declare-fun $generated@@70 (Int) T@U)
(declare-fun $generated@@71 (T@T T@T) T@T)
(declare-fun $generated@@72 () T@T)
(declare-fun $generated@@73 () T@T)
(declare-fun $generated@@74 (T@T) T@T)
(declare-fun $generated@@75 (T@T) T@T)
(declare-fun $generated@@76 (T@U T@U) T@U)
(declare-fun $generated@@77 (T@U T@U T@U) T@U)
(declare-fun $generated@@78 (T@U T@U) T@U)
(declare-fun $generated@@79 (T@U T@U T@U) T@U)
(declare-fun $generated@@127 () Int)
(declare-fun $generated@@128 (Int) Bool)
(declare-fun $generated@@130 (T@U T@U T@U) T@U)
(declare-fun $generated@@131 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@132 (T@T T@T) T@T)
(declare-fun $generated@@133 (T@T) T@T)
(declare-fun $generated@@134 (T@T) T@T)
(declare-fun $generated@@135 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@186 (Int) Int)
(declare-fun $generated@@189 (T@U) T@U)
(declare-fun $generated@@194 (T@T) T@U)
(declare-fun $generated@@195 (T@U) Int)
(declare-fun $generated@@196 (T@T) T@T)
(declare-fun $generated@@197 (T@T) T@T)
(declare-fun $generated@@202 (T@U T@U T@U) Bool)
(declare-fun $generated@@203 (T@U) T@U)
(declare-fun $generated@@204 () T@T)
(declare-fun $generated@@209 (T@U) T@U)
(declare-fun $generated@@210 (T@T T@T) T@U)
(declare-fun $generated@@211 (T@T T@T) T@T)
(declare-fun $generated@@212 (T@T) T@T)
(declare-fun $generated@@213 (T@T) T@T)
(declare-fun $generated@@227 (T@U) T@U)
(declare-fun $generated@@228 (T@T T@T) T@U)
(declare-fun $generated@@229 (T@T T@T) T@T)
(declare-fun $generated@@230 (T@T) T@T)
(declare-fun $generated@@231 (T@T) T@T)
(declare-fun $generated@@253 (T@U) T@U)
(declare-fun $generated@@259 (T@U) T@U)
(declare-fun $generated@@265 (T@U T@U) T@U)
(declare-fun $generated@@266 (T@U) T@U)
(declare-fun $generated@@277 (T@U T@U) T@U)
(declare-fun $generated@@278 (T@U) T@U)
(declare-fun $generated@@289 (T@T) T@U)
(declare-fun $generated@@296 (T@U) T@U)
(declare-fun $generated@@300 (T@U) T@U)
(declare-fun $generated@@306 (T@U) T@U)
(declare-fun $generated@@310 (T@U) T@U)
(declare-fun $generated@@316 (T@U) T@U)
(declare-fun $generated@@317 (T@U Int) T@U)
(declare-fun $generated@@326 (T@U) Int)
(declare-fun $generated@@328 (T@U) T@U)
(declare-fun $generated@@332 (T@U) T@U)
(declare-fun $generated@@336 (T@U) T@U)
(declare-fun $generated@@337 (T@U) T@U)
(declare-fun $generated@@342 (T@U) T@U)
(declare-fun $generated@@346 (T@T T@U) T@U)
(declare-fun $generated@@367 () T@T)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@61) 6) (= (type $generated@@44) $generated@@61)) (= (type $generated@@45) $generated@@61)) (= (type $generated@@46) $generated@@61)) (= (type $generated@@47) $generated@@61)) (= (type $generated@@48) $generated@@61)) (= ($generated@@1 $generated@@62) 7)) (= (type $generated@@49) $generated@@62)) (= (type $generated@@50) $generated@@62)) (= (type $generated@@51) $generated@@62)) (= (type $generated@@52) $generated@@62)) (= (type $generated@@53) $generated@@62)) (= (type $generated@@54) $generated@@62)) (= (type $generated@@55) $generated@@62)) (= (type $generated@@56) $generated@@62)) (= (type $generated@@57) $generated@@62)) (= (type $generated@@58) $generated@@62)) (= (type $generated@@59) $generated@@62)) (forall (($generated@@65 T@T) ) (= ($generated@@1 ($generated@@63 $generated@@65)) 8))) (forall (($generated@@66 T@T) ) (! (= ($generated@@64 ($generated@@63 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@63 $generated@@66))
))) (= (type $generated@@60) ($generated@@63 $generated@@4))))
(assert (distinct $generated@@44 $generated@@45 $generated@@46 $generated@@47 $generated@@48 $generated@@49 $generated@@50 $generated@@51 $generated@@52 $generated@@53 $generated@@54 $generated@@55 $generated@@56 $generated@@57 $generated@@58 $generated@@59 $generated@@60)
)
(assert (forall (($generated@@68 T@U) ) (! (= (type ($generated@@67 $generated@@68)) $generated@@62)
 :pattern ( ($generated@@67 $generated@@68))
)))
(assert (= ($generated@@67 $generated@@44) $generated@@49))
(assert (= ($generated@@67 $generated@@45) $generated@@50))
(assert (= ($generated@@67 $generated@@46) $generated@@51))
(assert (= ($generated@@67 $generated@@47) $generated@@52))
(assert (= ($generated@@67 $generated@@48) $generated@@53))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@80 T@T) ($generated@@81 T@T) ) (= ($generated@@1 ($generated@@71 $generated@@80 $generated@@81)) 9)) (forall (($generated@@82 T@T) ($generated@@83 T@T) ) (! (= ($generated@@74 ($generated@@71 $generated@@82 $generated@@83)) $generated@@82)
 :pattern ( ($generated@@71 $generated@@82 $generated@@83))
))) (forall (($generated@@84 T@T) ($generated@@85 T@T) ) (! (= ($generated@@75 ($generated@@71 $generated@@84 $generated@@85)) $generated@@85)
 :pattern ( ($generated@@71 $generated@@84 $generated@@85))
))) (forall (($generated@@86 T@U) ($generated@@87 T@U) ) (! (let (($generated@@88 ($generated@@75 (type $generated@@86))))
(= (type ($generated@@76 $generated@@86 $generated@@87)) $generated@@88))
 :pattern ( ($generated@@76 $generated@@86 $generated@@87))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (! (let (($generated@@92 (type $generated@@91)))
(let (($generated@@93 (type $generated@@90)))
(= (type ($generated@@77 $generated@@89 $generated@@90 $generated@@91)) ($generated@@71 $generated@@93 $generated@@92))))
 :pattern ( ($generated@@77 $generated@@89 $generated@@90 $generated@@91))
))) (forall (($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (! (let (($generated@@97 ($generated@@75 (type $generated@@94))))
 (=> (= (type $generated@@96) $generated@@97) (= ($generated@@76 ($generated@@77 $generated@@94 $generated@@95 $generated@@96) $generated@@95) $generated@@96)))
 :weight 0
))) (and (forall (($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (!  (or (= $generated@@100 $generated@@101) (= ($generated@@76 ($generated@@77 $generated@@99 $generated@@100 $generated@@98) $generated@@101) ($generated@@76 $generated@@99 $generated@@101)))
 :weight 0
)) (forall (($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (!  (or true (= ($generated@@76 ($generated@@77 $generated@@103 $generated@@104 $generated@@102) $generated@@105) ($generated@@76 $generated@@103 $generated@@105)))
 :weight 0
)))) (= ($generated@@1 $generated@@72) 10)) (forall (($generated@@106 T@U) ($generated@@107 T@U) ) (! (let (($generated@@108 ($generated@@64 (type $generated@@107))))
(= (type ($generated@@78 $generated@@106 $generated@@107)) $generated@@108))
 :pattern ( ($generated@@78 $generated@@106 $generated@@107))
))) (= ($generated@@1 $generated@@73) 11)) (forall (($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (! (= (type ($generated@@79 $generated@@109 $generated@@110 $generated@@111)) $generated@@73)
 :pattern ( ($generated@@79 $generated@@109 $generated@@110 $generated@@111))
))) (forall (($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (! (let (($generated@@115 ($generated@@64 (type $generated@@113))))
 (=> (= (type $generated@@114) $generated@@115) (= ($generated@@78 ($generated@@79 $generated@@112 $generated@@113 $generated@@114) $generated@@113) $generated@@114)))
 :weight 0
))) (and (forall (($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ) (!  (or (= $generated@@118 $generated@@119) (= ($generated@@78 ($generated@@79 $generated@@117 $generated@@118 $generated@@116) $generated@@119) ($generated@@78 $generated@@117 $generated@@119)))
 :weight 0
)) (forall (($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ) (!  (or true (= ($generated@@78 ($generated@@79 $generated@@121 $generated@@122 $generated@@120) $generated@@123) ($generated@@78 $generated@@121 $generated@@123)))
 :weight 0
)))) (forall (($generated@@124 Int) ) (! (= (type ($generated@@70 $generated@@124)) $generated@@61)
 :pattern ( ($generated@@70 $generated@@124))
))))
(assert (forall (($generated@@125 T@U) ($generated@@126 T@U) ) (!  (=> (and (= (type $generated@@125) $generated@@2) (= (type $generated@@126) ($generated@@71 $generated@@72 $generated@@73))) ($generated@@69 $generated@@125 ($generated@@70 0) $generated@@126))
 :pattern ( ($generated@@69 $generated@@125 ($generated@@70 0) $generated@@126))
)))
(assert  (=> (<= 0 $generated@@127) (forall (($generated@@129 Int) ) (!  (=> (or ($generated@@128 $generated@@129) (not (= 0 $generated@@127))) (= 0 (ite (< $generated@@129 0) (- 0 $generated@@129) $generated@@129)))
 :pattern ( 0)
))))
(assert  (and (and (and (and (and (and (and (forall (($generated@@136 T@T) ($generated@@137 T@T) ) (= ($generated@@1 ($generated@@132 $generated@@136 $generated@@137)) 12)) (forall (($generated@@138 T@T) ($generated@@139 T@T) ) (! (= ($generated@@133 ($generated@@132 $generated@@138 $generated@@139)) $generated@@138)
 :pattern ( ($generated@@132 $generated@@138 $generated@@139))
))) (forall (($generated@@140 T@T) ($generated@@141 T@T) ) (! (= ($generated@@134 ($generated@@132 $generated@@140 $generated@@141)) $generated@@141)
 :pattern ( ($generated@@132 $generated@@140 $generated@@141))
))) (forall (($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ) (! (let (($generated@@145 ($generated@@134 (type $generated@@142))))
(= (type ($generated@@130 $generated@@142 $generated@@143 $generated@@144)) $generated@@145))
 :pattern ( ($generated@@130 $generated@@142 $generated@@143 $generated@@144))
))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ) (! (let (($generated@@150 (type $generated@@149)))
(let (($generated@@151 (type $generated@@147)))
(= (type ($generated@@135 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@132 $generated@@151 $generated@@150))))
 :pattern ( ($generated@@135 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))) (forall (($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@134 (type $generated@@152))))
 (=> (= (type $generated@@155) $generated@@156) (= ($generated@@130 ($generated@@135 $generated@@152 $generated@@153 $generated@@154 $generated@@155) $generated@@153 $generated@@154) $generated@@155)))
 :weight 0
))) (and (and (forall (($generated@@157 T@U) ($generated@@158 T@U) ($generated@@159 T@U) ($generated@@160 T@U) ($generated@@161 T@U) ($generated@@162 T@U) ) (!  (or (= $generated@@159 $generated@@161) (= ($generated@@130 ($generated@@135 $generated@@158 $generated@@159 $generated@@160 $generated@@157) $generated@@161 $generated@@162) ($generated@@130 $generated@@158 $generated@@161 $generated@@162)))
 :weight 0
)) (forall (($generated@@163 T@U) ($generated@@164 T@U) ($generated@@165 T@U) ($generated@@166 T@U) ($generated@@167 T@U) ($generated@@168 T@U) ) (!  (or (= $generated@@166 $generated@@168) (= ($generated@@130 ($generated@@135 $generated@@164 $generated@@165 $generated@@166 $generated@@163) $generated@@167 $generated@@168) ($generated@@130 $generated@@164 $generated@@167 $generated@@168)))
 :weight 0
))) (forall (($generated@@169 T@U) ($generated@@170 T@U) ($generated@@171 T@U) ($generated@@172 T@U) ($generated@@173 T@U) ($generated@@174 T@U) ) (!  (or true (= ($generated@@130 ($generated@@135 $generated@@170 $generated@@171 $generated@@172 $generated@@169) $generated@@173 $generated@@174) ($generated@@130 $generated@@170 $generated@@173 $generated@@174)))
 :weight 0
)))) (forall (($generated@@175 T@U) ($generated@@176 T@U) ($generated@@177 T@U) ($generated@@178 Bool) ) (! (= (type ($generated@@131 $generated@@175 $generated@@176 $generated@@177 $generated@@178)) ($generated@@132 $generated@@72 $generated@@4))
 :pattern ( ($generated@@131 $generated@@175 $generated@@176 $generated@@177 $generated@@178))
))))
(assert (forall (($generated@@179 T@U) ($generated@@180 T@U) ($generated@@181 T@U) ($generated@@182 Bool) ($generated@@183 T@U) ($generated@@184 T@U) ) (! (let (($generated@@185 ($generated@@64 (type $generated@@184))))
 (=> (and (and (and (and (= (type $generated@@179) $generated@@72) (= (type $generated@@180) ($generated@@71 $generated@@72 $generated@@73))) (= (type $generated@@181) ($generated@@63 $generated@@4))) (= (type $generated@@183) $generated@@72)) (= (type $generated@@184) ($generated@@63 $generated@@185))) (= ($generated@@0 ($generated@@130 ($generated@@131 $generated@@179 $generated@@180 $generated@@181 $generated@@182) $generated@@183 $generated@@184))  (=> (and (not (= $generated@@183 $generated@@179)) ($generated@@0 ($generated@@78 ($generated@@76 $generated@@180 $generated@@183) $generated@@181))) $generated@@182))))
 :pattern ( ($generated@@130 ($generated@@131 $generated@@179 $generated@@180 $generated@@181 $generated@@182) $generated@@183 $generated@@184))
)))
(assert  (=> (<= 0 $generated@@127) (forall (($generated@@187 Int) ) (!  (=> (or ($generated@@128 ($generated@@186 $generated@@187)) (not (= 0 $generated@@127))) (= 0 (ite (< $generated@@187 0) (- 0 $generated@@187) $generated@@187)))
 :weight 3
 :pattern ( 0)
))))
(assert (forall (($generated@@188 Int) ) (! (= ($generated@@186 $generated@@188) $generated@@188)
 :pattern ( ($generated@@186 $generated@@188))
)))
(assert (forall (($generated@@190 T@U) ) (! (let (($generated@@191 (type $generated@@190)))
(= (type ($generated@@189 $generated@@190)) $generated@@191))
 :pattern ( ($generated@@189 $generated@@190))
)))
(assert (forall (($generated@@192 T@U) ) (! (= ($generated@@189 $generated@@192) $generated@@192)
 :pattern ( ($generated@@189 $generated@@192))
)))
(assert  (=> (<= 0 $generated@@127) (forall (($generated@@193 Int) ) (!  (=> (or ($generated@@128 $generated@@193) (not (= 0 $generated@@127))) true)
 :pattern ( 0)
))))
(assert  (and (and (forall (($generated@@198 T@T) ) (= ($generated@@1 ($generated@@196 $generated@@198)) 13)) (forall (($generated@@199 T@T) ) (! (= ($generated@@197 ($generated@@196 $generated@@199)) $generated@@199)
 :pattern ( ($generated@@196 $generated@@199))
))) (forall (($generated@@200 T@T) ) (! (= (type ($generated@@194 $generated@@200)) ($generated@@196 $generated@@200))
 :pattern ( ($generated@@194 $generated@@200))
))))
(assert (forall (($generated@@201 T@T) ) (! (= ($generated@@195 ($generated@@194 $generated@@201)) 0)
 :pattern ( ($generated@@194 $generated@@201))
)))
(assert  (and (= ($generated@@1 $generated@@204) 14) (forall (($generated@@205 T@U) ) (! (= (type ($generated@@203 $generated@@205)) $generated@@204)
 :pattern ( ($generated@@203 $generated@@205))
))))
(assert (forall (($generated@@206 T@U) ($generated@@207 T@U) ($generated@@208 T@U) ) (!  (=> (and (= (type $generated@@207) $generated@@61) (= (type $generated@@208) ($generated@@71 $generated@@72 $generated@@73))) (= ($generated@@202 ($generated@@203 $generated@@206) $generated@@207 $generated@@208) ($generated@@69 $generated@@206 $generated@@207 $generated@@208)))
 :pattern ( ($generated@@202 ($generated@@203 $generated@@206) $generated@@207 $generated@@208))
)))
(assert  (and (and (and (and (forall (($generated@@214 T@T) ($generated@@215 T@T) ) (= ($generated@@1 ($generated@@211 $generated@@214 $generated@@215)) 15)) (forall (($generated@@216 T@T) ($generated@@217 T@T) ) (! (= ($generated@@212 ($generated@@211 $generated@@216 $generated@@217)) $generated@@216)
 :pattern ( ($generated@@211 $generated@@216 $generated@@217))
))) (forall (($generated@@218 T@T) ($generated@@219 T@T) ) (! (= ($generated@@213 ($generated@@211 $generated@@218 $generated@@219)) $generated@@219)
 :pattern ( ($generated@@211 $generated@@218 $generated@@219))
))) (forall (($generated@@220 T@U) ) (! (let (($generated@@221 ($generated@@212 (type $generated@@220))))
(= (type ($generated@@209 $generated@@220)) ($generated@@71 $generated@@221 $generated@@4)))
 :pattern ( ($generated@@209 $generated@@220))
))) (forall (($generated@@222 T@T) ($generated@@223 T@T) ) (! (= (type ($generated@@210 $generated@@222 $generated@@223)) ($generated@@211 $generated@@222 $generated@@223))
 :pattern ( ($generated@@210 $generated@@222 $generated@@223))
))))
(assert (forall (($generated@@224 T@U) ($generated@@225 T@T) ) (! (let (($generated@@226 (type $generated@@224)))
 (not ($generated@@0 ($generated@@76 ($generated@@209 ($generated@@210 $generated@@226 $generated@@225)) $generated@@224))))
 :pattern ( (let (($generated@@226 (type $generated@@224)))
($generated@@76 ($generated@@209 ($generated@@210 $generated@@226 $generated@@225)) $generated@@224)))
)))
(assert  (and (and (and (and (forall (($generated@@232 T@T) ($generated@@233 T@T) ) (= ($generated@@1 ($generated@@229 $generated@@232 $generated@@233)) 16)) (forall (($generated@@234 T@T) ($generated@@235 T@T) ) (! (= ($generated@@230 ($generated@@229 $generated@@234 $generated@@235)) $generated@@234)
 :pattern ( ($generated@@229 $generated@@234 $generated@@235))
))) (forall (($generated@@236 T@T) ($generated@@237 T@T) ) (! (= ($generated@@231 ($generated@@229 $generated@@236 $generated@@237)) $generated@@237)
 :pattern ( ($generated@@229 $generated@@236 $generated@@237))
))) (forall (($generated@@238 T@U) ) (! (let (($generated@@239 ($generated@@230 (type $generated@@238))))
(= (type ($generated@@227 $generated@@238)) ($generated@@71 $generated@@239 $generated@@4)))
 :pattern ( ($generated@@227 $generated@@238))
))) (forall (($generated@@240 T@T) ($generated@@241 T@T) ) (! (= (type ($generated@@228 $generated@@240 $generated@@241)) ($generated@@229 $generated@@240 $generated@@241))
 :pattern ( ($generated@@228 $generated@@240 $generated@@241))
))))
(assert (forall (($generated@@242 T@U) ($generated@@243 T@T) ) (! (let (($generated@@244 (type $generated@@242)))
 (not ($generated@@0 ($generated@@76 ($generated@@227 ($generated@@228 $generated@@244 $generated@@243)) $generated@@242))))
 :pattern ( (let (($generated@@244 (type $generated@@242)))
($generated@@76 ($generated@@227 ($generated@@228 $generated@@244 $generated@@243)) $generated@@242)))
)))
(assert (forall (($generated@@245 T@U) ) (! (let (($generated@@246 ($generated@@213 (type $generated@@245))))
(let (($generated@@247 ($generated@@212 (type $generated@@245))))
 (=> (= (type $generated@@245) ($generated@@211 $generated@@247 $generated@@246)) (or (= $generated@@245 ($generated@@210 $generated@@247 $generated@@246)) (exists (($generated@@248 T@U) ) (!  (and (= (type $generated@@248) $generated@@247) ($generated@@0 ($generated@@76 ($generated@@209 $generated@@245) $generated@@248)))
 :no-pattern (type $generated@@248)
 :no-pattern ($generated $generated@@248)
 :no-pattern ($generated@@0 $generated@@248)
))))))
 :pattern ( ($generated@@209 $generated@@245))
)))
(assert (forall (($generated@@249 T@U) ) (! (let (($generated@@250 ($generated@@231 (type $generated@@249))))
(let (($generated@@251 ($generated@@230 (type $generated@@249))))
 (=> (= (type $generated@@249) ($generated@@229 $generated@@251 $generated@@250)) (or (= $generated@@249 ($generated@@228 $generated@@251 $generated@@250)) (exists (($generated@@252 T@U) ) (!  (and (= (type $generated@@252) $generated@@251) ($generated@@0 ($generated@@76 ($generated@@227 $generated@@249) $generated@@252)))
 :no-pattern (type $generated@@252)
 :no-pattern ($generated $generated@@252)
 :no-pattern ($generated@@0 $generated@@252)
))))))
 :pattern ( ($generated@@227 $generated@@249))
)))
(assert (forall (($generated@@254 T@U) ) (! (= (type ($generated@@253 $generated@@254)) $generated@@61)
 :pattern ( ($generated@@253 $generated@@254))
)))
(assert (forall (($generated@@255 T@U) ($generated@@256 T@U) ($generated@@257 T@U) ) (!  (=> (and (and (= (type $generated@@255) ($generated@@71 $generated@@204 $generated@@4)) (= (type $generated@@256) $generated@@61)) (= (type $generated@@257) ($generated@@71 $generated@@72 $generated@@73))) (= ($generated@@69 $generated@@255 ($generated@@253 $generated@@256) $generated@@257) (forall (($generated@@258 T@U) ) (!  (=> (and (= (type $generated@@258) $generated@@204) ($generated@@0 ($generated@@76 $generated@@255 $generated@@258))) ($generated@@202 $generated@@258 $generated@@256 $generated@@257))
 :pattern ( ($generated@@76 $generated@@255 $generated@@258))
))))
 :pattern ( ($generated@@69 $generated@@255 ($generated@@253 $generated@@256) $generated@@257))
)))
(assert (forall (($generated@@260 T@U) ) (! (= (type ($generated@@259 $generated@@260)) $generated@@61)
 :pattern ( ($generated@@259 $generated@@260))
)))
(assert (forall (($generated@@261 T@U) ($generated@@262 T@U) ($generated@@263 T@U) ) (!  (=> (and (and (= (type $generated@@261) ($generated@@71 $generated@@204 $generated@@4)) (= (type $generated@@262) $generated@@61)) (= (type $generated@@263) ($generated@@71 $generated@@72 $generated@@73))) (= ($generated@@69 $generated@@261 ($generated@@259 $generated@@262) $generated@@263) (forall (($generated@@264 T@U) ) (!  (=> (and (= (type $generated@@264) $generated@@204) ($generated@@0 ($generated@@76 $generated@@261 $generated@@264))) ($generated@@202 $generated@@264 $generated@@262 $generated@@263))
 :pattern ( ($generated@@76 $generated@@261 $generated@@264))
))))
 :pattern ( ($generated@@69 $generated@@261 ($generated@@259 $generated@@262) $generated@@263))
)))
(assert  (and (forall (($generated@@267 T@U) ($generated@@268 T@U) ) (! (= (type ($generated@@265 $generated@@267 $generated@@268)) $generated@@61)
 :pattern ( ($generated@@265 $generated@@267 $generated@@268))
)) (forall (($generated@@269 T@U) ) (! (let (($generated@@270 ($generated@@213 (type $generated@@269))))
(let (($generated@@271 ($generated@@212 (type $generated@@269))))
(= (type ($generated@@266 $generated@@269)) ($generated@@71 $generated@@271 $generated@@270))))
 :pattern ( ($generated@@266 $generated@@269))
))))
(assert (forall (($generated@@272 T@U) ($generated@@273 T@U) ($generated@@274 T@U) ($generated@@275 T@U) ) (!  (=> (and (and (and (= (type $generated@@272) ($generated@@211 $generated@@204 $generated@@204)) (= (type $generated@@273) $generated@@61)) (= (type $generated@@274) $generated@@61)) (= (type $generated@@275) ($generated@@71 $generated@@72 $generated@@73))) (= ($generated@@69 $generated@@272 ($generated@@265 $generated@@273 $generated@@274) $generated@@275) (forall (($generated@@276 T@U) ) (!  (=> (and (= (type $generated@@276) $generated@@204) ($generated@@0 ($generated@@76 ($generated@@209 $generated@@272) $generated@@276))) (and ($generated@@202 ($generated@@76 ($generated@@266 $generated@@272) $generated@@276) $generated@@274 $generated@@275) ($generated@@202 $generated@@276 $generated@@273 $generated@@275)))
 :pattern ( ($generated@@76 ($generated@@266 $generated@@272) $generated@@276))
 :pattern ( ($generated@@76 ($generated@@209 $generated@@272) $generated@@276))
))))
 :pattern ( ($generated@@69 $generated@@272 ($generated@@265 $generated@@273 $generated@@274) $generated@@275))
)))
(assert  (and (forall (($generated@@279 T@U) ($generated@@280 T@U) ) (! (= (type ($generated@@277 $generated@@279 $generated@@280)) $generated@@61)
 :pattern ( ($generated@@277 $generated@@279 $generated@@280))
)) (forall (($generated@@281 T@U) ) (! (let (($generated@@282 ($generated@@231 (type $generated@@281))))
(let (($generated@@283 ($generated@@230 (type $generated@@281))))
(= (type ($generated@@278 $generated@@281)) ($generated@@71 $generated@@283 $generated@@282))))
 :pattern ( ($generated@@278 $generated@@281))
))))
(assert (forall (($generated@@284 T@U) ($generated@@285 T@U) ($generated@@286 T@U) ($generated@@287 T@U) ) (!  (=> (and (and (and (= (type $generated@@284) ($generated@@229 $generated@@204 $generated@@204)) (= (type $generated@@285) $generated@@61)) (= (type $generated@@286) $generated@@61)) (= (type $generated@@287) ($generated@@71 $generated@@72 $generated@@73))) (= ($generated@@69 $generated@@284 ($generated@@277 $generated@@285 $generated@@286) $generated@@287) (forall (($generated@@288 T@U) ) (!  (=> (and (= (type $generated@@288) $generated@@204) ($generated@@0 ($generated@@76 ($generated@@227 $generated@@284) $generated@@288))) (and ($generated@@202 ($generated@@76 ($generated@@278 $generated@@284) $generated@@288) $generated@@286 $generated@@287) ($generated@@202 $generated@@288 $generated@@285 $generated@@287)))
 :pattern ( ($generated@@76 ($generated@@278 $generated@@284) $generated@@288))
 :pattern ( ($generated@@76 ($generated@@227 $generated@@284) $generated@@288))
))))
 :pattern ( ($generated@@69 $generated@@284 ($generated@@277 $generated@@285 $generated@@286) $generated@@287))
)))
(assert (forall (($generated@@290 T@T) ) (! (= (type ($generated@@289 $generated@@290)) ($generated@@71 $generated@@290 $generated@@4))
 :pattern ( ($generated@@289 $generated@@290))
)))
(assert (forall (($generated@@291 T@U) ) (! (let (($generated@@292 ($generated@@231 (type $generated@@291))))
(let (($generated@@293 ($generated@@230 (type $generated@@291))))
 (=> (= (type $generated@@291) ($generated@@229 $generated@@293 $generated@@292)) (= (= $generated@@291 ($generated@@228 $generated@@293 $generated@@292)) (= ($generated@@227 $generated@@291) ($generated@@289 $generated@@293))))))
 :pattern ( ($generated@@227 $generated@@291))
)))
(assert (forall (($generated@@294 T@U) ) (! (let (($generated@@295 ($generated@@197 (type $generated@@294))))
 (=> (= (type $generated@@294) ($generated@@196 $generated@@295)) (<= 0 ($generated@@195 $generated@@294))))
 :pattern ( ($generated@@195 $generated@@294))
)))
(assert (forall (($generated@@297 T@U) ) (! (= (type ($generated@@296 $generated@@297)) $generated@@61)
 :pattern ( ($generated@@296 $generated@@297))
)))
(assert (forall (($generated@@298 T@U) ($generated@@299 T@U) ) (!  (=> (and (= (type $generated@@298) $generated@@61) (= (type $generated@@299) $generated@@61)) (= ($generated@@296 ($generated@@265 $generated@@298 $generated@@299)) $generated@@298))
 :pattern ( ($generated@@265 $generated@@298 $generated@@299))
)))
(assert (forall (($generated@@301 T@U) ) (! (= (type ($generated@@300 $generated@@301)) $generated@@61)
 :pattern ( ($generated@@300 $generated@@301))
)))
(assert (forall (($generated@@302 T@U) ($generated@@303 T@U) ) (!  (=> (and (= (type $generated@@302) $generated@@61) (= (type $generated@@303) $generated@@61)) (= ($generated@@300 ($generated@@265 $generated@@302 $generated@@303)) $generated@@303))
 :pattern ( ($generated@@265 $generated@@302 $generated@@303))
)))
(assert (forall (($generated@@304 T@U) ($generated@@305 T@U) ) (!  (=> (and (= (type $generated@@304) $generated@@61) (= (type $generated@@305) $generated@@61)) (= ($generated@@67 ($generated@@265 $generated@@304 $generated@@305)) $generated@@58))
 :pattern ( ($generated@@265 $generated@@304 $generated@@305))
)))
(assert (forall (($generated@@307 T@U) ) (! (= (type ($generated@@306 $generated@@307)) $generated@@61)
 :pattern ( ($generated@@306 $generated@@307))
)))
(assert (forall (($generated@@308 T@U) ($generated@@309 T@U) ) (!  (=> (and (= (type $generated@@308) $generated@@61) (= (type $generated@@309) $generated@@61)) (= ($generated@@306 ($generated@@277 $generated@@308 $generated@@309)) $generated@@308))
 :pattern ( ($generated@@277 $generated@@308 $generated@@309))
)))
(assert (forall (($generated@@311 T@U) ) (! (= (type ($generated@@310 $generated@@311)) $generated@@61)
 :pattern ( ($generated@@310 $generated@@311))
)))
(assert (forall (($generated@@312 T@U) ($generated@@313 T@U) ) (!  (=> (and (= (type $generated@@312) $generated@@61) (= (type $generated@@313) $generated@@61)) (= ($generated@@310 ($generated@@277 $generated@@312 $generated@@313)) $generated@@313))
 :pattern ( ($generated@@277 $generated@@312 $generated@@313))
)))
(assert (forall (($generated@@314 T@U) ($generated@@315 T@U) ) (!  (=> (and (= (type $generated@@314) $generated@@61) (= (type $generated@@315) $generated@@61)) (= ($generated@@67 ($generated@@277 $generated@@314 $generated@@315)) $generated@@59))
 :pattern ( ($generated@@277 $generated@@314 $generated@@315))
)))
(assert  (and (forall (($generated@@318 T@U) ) (! (= (type ($generated@@316 $generated@@318)) $generated@@61)
 :pattern ( ($generated@@316 $generated@@318))
)) (forall (($generated@@319 T@U) ($generated@@320 Int) ) (! (let (($generated@@321 ($generated@@197 (type $generated@@319))))
(= (type ($generated@@317 $generated@@319 $generated@@320)) $generated@@321))
 :pattern ( ($generated@@317 $generated@@319 $generated@@320))
))))
(assert (forall (($generated@@322 T@U) ($generated@@323 T@U) ($generated@@324 T@U) ) (!  (=> (and (and (= (type $generated@@322) ($generated@@196 $generated@@204)) (= (type $generated@@323) $generated@@61)) (= (type $generated@@324) ($generated@@71 $generated@@72 $generated@@73))) (= ($generated@@69 $generated@@322 ($generated@@316 $generated@@323) $generated@@324) (forall (($generated@@325 Int) ) (!  (=> (and (<= 0 $generated@@325) (< $generated@@325 ($generated@@195 $generated@@322))) ($generated@@202 ($generated@@317 $generated@@322 $generated@@325) $generated@@323 $generated@@324))
 :pattern ( ($generated@@317 $generated@@322 $generated@@325))
))))
 :pattern ( ($generated@@69 $generated@@322 ($generated@@316 $generated@@323) $generated@@324))
)))
(assert (forall (($generated@@327 Int) ) (! (= ($generated@@326 ($generated@@70 $generated@@327)) $generated@@327)
 :pattern ( ($generated@@70 $generated@@327))
)))
(assert (forall (($generated@@329 T@U) ) (! (= (type ($generated@@328 $generated@@329)) $generated@@61)
 :pattern ( ($generated@@328 $generated@@329))
)))
(assert (forall (($generated@@330 T@U) ) (!  (=> (= (type $generated@@330) $generated@@61) (= ($generated@@328 ($generated@@253 $generated@@330)) $generated@@330))
 :pattern ( ($generated@@253 $generated@@330))
)))
(assert (forall (($generated@@331 T@U) ) (!  (=> (= (type $generated@@331) $generated@@61) (= ($generated@@67 ($generated@@253 $generated@@331)) $generated@@54))
 :pattern ( ($generated@@253 $generated@@331))
)))
(assert (forall (($generated@@333 T@U) ) (! (= (type ($generated@@332 $generated@@333)) $generated@@61)
 :pattern ( ($generated@@332 $generated@@333))
)))
(assert (forall (($generated@@334 T@U) ) (!  (=> (= (type $generated@@334) $generated@@61) (= ($generated@@332 ($generated@@259 $generated@@334)) $generated@@334))
 :pattern ( ($generated@@259 $generated@@334))
)))
(assert (forall (($generated@@335 T@U) ) (!  (=> (= (type $generated@@335) $generated@@61) (= ($generated@@67 ($generated@@259 $generated@@335)) $generated@@55))
 :pattern ( ($generated@@259 $generated@@335))
)))
(assert  (and (forall (($generated@@338 T@U) ) (! (= (type ($generated@@336 $generated@@338)) $generated@@61)
 :pattern ( ($generated@@336 $generated@@338))
)) (forall (($generated@@339 T@U) ) (! (= (type ($generated@@337 $generated@@339)) $generated@@61)
 :pattern ( ($generated@@337 $generated@@339))
))))
(assert (forall (($generated@@340 T@U) ) (!  (=> (= (type $generated@@340) $generated@@61) (= ($generated@@337 ($generated@@336 $generated@@340)) $generated@@340))
 :pattern ( ($generated@@336 $generated@@340))
)))
(assert (forall (($generated@@341 T@U) ) (!  (=> (= (type $generated@@341) $generated@@61) (= ($generated@@67 ($generated@@336 $generated@@341)) $generated@@56))
 :pattern ( ($generated@@336 $generated@@341))
)))
(assert (forall (($generated@@343 T@U) ) (! (= (type ($generated@@342 $generated@@343)) $generated@@61)
 :pattern ( ($generated@@342 $generated@@343))
)))
(assert (forall (($generated@@344 T@U) ) (!  (=> (= (type $generated@@344) $generated@@61) (= ($generated@@342 ($generated@@316 $generated@@344)) $generated@@344))
 :pattern ( ($generated@@316 $generated@@344))
)))
(assert (forall (($generated@@345 T@U) ) (!  (=> (= (type $generated@@345) $generated@@61) (= ($generated@@67 ($generated@@316 $generated@@345)) $generated@@57))
 :pattern ( ($generated@@316 $generated@@345))
)))
(assert (forall (($generated@@347 T@T) ($generated@@348 T@U) ) (! (= (type ($generated@@346 $generated@@347 $generated@@348)) $generated@@347)
 :pattern ( ($generated@@346 $generated@@347 $generated@@348))
)))
(assert (forall (($generated@@349 T@U) ) (! (let (($generated@@350 (type $generated@@349)))
(= ($generated@@346 $generated@@350 ($generated@@203 $generated@@349)) $generated@@349))
 :pattern ( ($generated@@203 $generated@@349))
)))
(assert (forall (($generated@@351 T@U) ) (! (let (($generated@@352 (type $generated@@351)))
 (not ($generated@@0 ($generated@@76 ($generated@@289 $generated@@352) $generated@@351))))
 :pattern ( (let (($generated@@352 (type $generated@@351)))
($generated@@76 ($generated@@289 $generated@@352) $generated@@351)))
)))
(assert (forall (($generated@@353 T@U) ($generated@@354 T@U) ($generated@@355 T@U) ) (!  (=> (and (and (= (type $generated@@353) ($generated@@71 $generated@@204 $generated@@2)) (= (type $generated@@354) $generated@@61)) (= (type $generated@@355) ($generated@@71 $generated@@72 $generated@@73))) (= ($generated@@69 $generated@@353 ($generated@@336 $generated@@354) $generated@@355) (forall (($generated@@356 T@U) ) (!  (=> (and (= (type $generated@@356) $generated@@204) (< 0 ($generated ($generated@@76 $generated@@353 $generated@@356)))) ($generated@@202 $generated@@356 $generated@@354 $generated@@355))
 :pattern ( ($generated@@76 $generated@@353 $generated@@356))
))))
 :pattern ( ($generated@@69 $generated@@353 ($generated@@336 $generated@@354) $generated@@355))
)))
(assert (forall (($generated@@357 Int) ) (! (= ($generated@@203 ($generated@@8 ($generated@@186 $generated@@357))) ($generated@@189 ($generated@@203 ($generated@@8 $generated@@357))))
 :pattern ( ($generated@@203 ($generated@@8 ($generated@@186 $generated@@357))))
)))
(assert (forall (($generated@@358 T@U) ) (! (= ($generated@@203 ($generated@@189 $generated@@358)) ($generated@@189 ($generated@@203 $generated@@358)))
 :pattern ( ($generated@@203 ($generated@@189 $generated@@358)))
)))
(assert (forall (($generated@@359 T@U) ) (! (let (($generated@@360 ($generated@@197 (type $generated@@359))))
 (=> (and (= (type $generated@@359) ($generated@@196 $generated@@360)) (= ($generated@@195 $generated@@359) 0)) (= $generated@@359 ($generated@@194 $generated@@360))))
 :pattern ( ($generated@@195 $generated@@359))
)))
(assert (forall (($generated@@361 T@U) ($generated@@362 T@U) ) (!  (=> (and (= (type $generated@@361) ($generated@@71 $generated@@72 $generated@@73)) (= (type $generated@@362) $generated@@2)) ($generated@@69 $generated@@362 $generated@@46 $generated@@361))
 :pattern ( ($generated@@69 $generated@@362 $generated@@46 $generated@@361))
)))
(assert (forall (($generated@@363 T@U) ($generated@@364 T@U) ) (!  (=> (and (= (type $generated@@363) ($generated@@71 $generated@@72 $generated@@73)) (= (type $generated@@364) $generated@@3)) ($generated@@69 $generated@@364 $generated@@47 $generated@@363))
 :pattern ( ($generated@@69 $generated@@364 $generated@@47 $generated@@363))
)))
(assert (forall (($generated@@365 T@U) ($generated@@366 T@U) ) (!  (=> (and (= (type $generated@@365) ($generated@@71 $generated@@72 $generated@@73)) (= (type $generated@@366) $generated@@4)) ($generated@@69 $generated@@366 $generated@@44 $generated@@365))
 :pattern ( ($generated@@69 $generated@@366 $generated@@44 $generated@@365))
)))
(assert (= ($generated@@1 $generated@@367) 17))
(assert (forall (($generated@@368 T@U) ($generated@@369 T@U) ) (!  (=> (and (= (type $generated@@368) ($generated@@71 $generated@@72 $generated@@73)) (= (type $generated@@369) $generated@@367)) ($generated@@69 $generated@@369 $generated@@45 $generated@@368))
 :pattern ( ($generated@@69 $generated@@369 $generated@@45 $generated@@368))
)))
(assert (forall (($generated@@370 T@U) ($generated@@371 T@U) ) (!  (=> (and (= (type $generated@@370) ($generated@@71 $generated@@72 $generated@@73)) (= (type $generated@@371) $generated@@204)) ($generated@@69 $generated@@371 $generated@@48 $generated@@370))
 :pattern ( ($generated@@69 $generated@@371 $generated@@48 $generated@@370))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@372 () T@U)
(declare-fun $generated@@373 () T@U)
(declare-fun $generated@@374 () T@U)
(declare-fun $generated@@375 () Int)
(declare-fun $generated@@376 (T@U) Bool)
(declare-fun $generated@@377 (T@U) Bool)
(assert  (and (and (= (type $generated@@372) ($generated@@132 $generated@@72 $generated@@4)) (= (type $generated@@373) $generated@@72)) (= (type $generated@@374) ($generated@@71 $generated@@72 $generated@@73))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@378  (=> (and (= $generated@@372 ($generated@@131 $generated@@373 $generated@@374 $generated@@60 false)) (= $generated@@375 ($generated@@186 3))) (=> (and (and ($generated@@69 ($generated@@8 $generated@@375) $generated@@46 $generated@@374) ($generated@@128 ($generated@@186 3))) (and ($generated@@128 ($generated@@186 3)) (= (ControlFlow 0 2) (- 0 1)))) (= ($generated@@186 0) ($generated@@186 3))))))
(let (($generated@@379  (=> (and (and ($generated@@376 $generated@@374) ($generated@@377 $generated@@374)) (and (= 1 $generated@@127) (= (ControlFlow 0 3) 2))) $generated@@378)))
$generated@@379)))
))
; Valid
